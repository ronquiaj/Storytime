[{"/Users/adrianronquillo/Desktop/storytime/src/index.js":"1","/Users/adrianronquillo/Desktop/storytime/src/components/App.js":"2","/Users/adrianronquillo/Desktop/storytime/src/components/Login.js":"3","/Users/adrianronquillo/Desktop/storytime/src/components/Home.js":"4","/Users/adrianronquillo/Desktop/storytime/src/components/AppNav.js":"5","/Users/adrianronquillo/Desktop/storytime/src/components/Story.js":"6","/Users/adrianronquillo/Desktop/storytime/src/components/User.js":"7","/Users/adrianronquillo/Desktop/storytime/src/components/Error.js":"8","/Users/adrianronquillo/Desktop/storytime/src/components/EditUser.js":"9","/Users/adrianronquillo/Desktop/storytime/src/components/Signup.js":"10","/Users/adrianronquillo/Desktop/storytime/src/contexts/AuthenticatedContext.js":"11","/Users/adrianronquillo/Desktop/storytime/src/contexts/UpdatedUserContext.js":"12","/Users/adrianronquillo/Desktop/storytime/src/components/Spinner.js":"13","/Users/adrianronquillo/Desktop/storytime/src/components/UserDisplay.js":"14","/Users/adrianronquillo/Desktop/storytime/src/components/Post.js":"15","/Users/adrianronquillo/Desktop/storytime/src/hooks/useForm.js":"16","/Users/adrianronquillo/Desktop/storytime/src/firebase/Firebase.js":"17","/Users/adrianronquillo/Desktop/storytime/src/components/StoryDisplay.js":"18","/Users/adrianronquillo/Desktop/storytime/src/components/SignupForm.js":"19","/Users/adrianronquillo/Desktop/storytime/src/components/LoginForm.js":"20","/Users/adrianronquillo/Desktop/storytime/src/components/MiniStory.js":"21","/Users/adrianronquillo/Desktop/storytime/src/components/PostDisplay.js":"22","/Users/adrianronquillo/Desktop/storytime/src/components/EditUserForn.js":"23","/Users/adrianronquillo/Desktop/storytime/src/components/HomeForm.js":"24","/Users/adrianronquillo/Desktop/storytime/src/components/Timer.js":"25","/Users/adrianronquillo/Desktop/storytime/src/components/timer.js":"26","/Users/adrianronquillo/Desktop/storytime/src/styles/storyStyles.js":"27","/Users/adrianronquillo/Desktop/storytime/src/styles/homeStyles.js":"28","/Users/adrianronquillo/Desktop/storytime/src/styles/editUserStyles.js":"29","/Users/adrianronquillo/Desktop/storytime/src/styles/userDisplayStyles.js":"30","/Users/adrianronquillo/Desktop/storytime/src/styles/postStyles.js":"31","/Users/adrianronquillo/Desktop/storytime/src/components/ReactSlider.js":"32"},{"size":348,"mtime":1608348905480,"results":"33","hashOfConfig":"34"},{"size":1478,"mtime":1611907861065,"results":"35","hashOfConfig":"34"},{"size":1411,"mtime":1611693475315,"results":"36","hashOfConfig":"34"},{"size":3890,"mtime":1611947200165,"results":"37","hashOfConfig":"34"},{"size":3367,"mtime":1611466723932,"results":"38","hashOfConfig":"34"},{"size":8846,"mtime":1611944499396,"results":"39","hashOfConfig":"34"},{"size":1083,"mtime":1611693339537,"results":"40","hashOfConfig":"34"},{"size":376,"mtime":1608847129830,"results":"41","hashOfConfig":"34"},{"size":3868,"mtime":1611944507727,"results":"42","hashOfConfig":"34"},{"size":4303,"mtime":1611693492206,"results":"43","hashOfConfig":"34"},{"size":664,"mtime":1608767565710,"results":"44","hashOfConfig":"34"},{"size":615,"mtime":1611466723947,"results":"45","hashOfConfig":"34"},{"size":2582,"mtime":1609118431570,"results":"46","hashOfConfig":"34"},{"size":636,"mtime":1611944509938,"results":"47","hashOfConfig":"34"},{"size":4405,"mtime":1611944512915,"results":"48","hashOfConfig":"34"},{"size":287,"mtime":1611897139994,"results":"49","hashOfConfig":"34"},{"size":718,"mtime":1609300728520,"results":"50","hashOfConfig":"34"},{"size":1956,"mtime":1611943973031,"results":"51","hashOfConfig":"34"},{"size":2702,"mtime":1611467711670,"results":"52","hashOfConfig":"34"},{"size":1686,"mtime":1611467937213,"results":"53","hashOfConfig":"34"},{"size":716,"mtime":1611698549241,"results":"54","hashOfConfig":"34"},{"size":1095,"mtime":1611469054891,"results":"55","hashOfConfig":"34"},{"size":1433,"mtime":1611693456979,"results":"56","hashOfConfig":"34"},{"size":3886,"mtime":1611950188644,"results":"57","hashOfConfig":"34"},{"size":2266,"mtime":1611711473746,"results":"58","hashOfConfig":"34"},{"size":2799,"mtime":1611903843695,"results":"59","hashOfConfig":"34"},{"size":1645,"mtime":1611944002530,"results":"60","hashOfConfig":"34"},{"size":393,"mtime":1611949134241,"results":"61","hashOfConfig":"34"},{"size":685,"mtime":1611469139228,"results":"62","hashOfConfig":"34"},{"size":309,"mtime":1611468789964,"results":"63","hashOfConfig":"34"},{"size":1094,"mtime":1611468840760,"results":"64","hashOfConfig":"34"},{"size":946,"mtime":1611949177933,"results":"65","hashOfConfig":"34"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},"1x4z3zo",{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"68"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"116","messages":"117","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},"/Users/adrianronquillo/Desktop/storytime/src/index.js",[],["132","133"],"/Users/adrianronquillo/Desktop/storytime/src/components/App.js",[],"/Users/adrianronquillo/Desktop/storytime/src/components/Login.js",[],"/Users/adrianronquillo/Desktop/storytime/src/components/Home.js",[],"/Users/adrianronquillo/Desktop/storytime/src/components/AppNav.js",[],"/Users/adrianronquillo/Desktop/storytime/src/components/Story.js",["134"],"import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport { useEffect, useState, useContext, useCallback } from 'react';\nimport { Alert } from 'react-bootstrap';\nimport { useHistory } from 'react-router-dom';\nimport { withStyles } from '@material-ui/core';\nimport { db } from '../firebase/Firebase';\nimport { AuthenticatedContext } from '../contexts/AuthenticatedContext';\nimport useForm from '../hooks/useForm';\nimport Post from './Post';\nimport styles from '../styles/storyStyles.js';\nimport StoryDisplay from './StoryDisplay';\nimport { compareTime, getCurrentTime, calculateTimeDifference } from \"./timer\";\n\nfunction Story(props) {\n  const history = useHistory();\n  const { title } = props.match.params;\n  const { classes } = props;\n  const { user } = useContext(AuthenticatedContext);\n  const [loading, changeLoading] = useState(true);\n  const [displayText, changeText] = useState(\"\");\n  const [displayPosts, changeDisplayPosts] = useState([]);\n  const [newPost, changeNewPost, reset] = useForm(\"\");\n  const [alert, changeAlert] = useState(\"\");\n  const [currentRound, changeCurrentRound] = useState(1);\n  const [totalRounds, changeTotalRounds] = useState(10);\n  const [timeObject, changeTimeObject] = useState({});\n  const [secondsLeft, changeSecondsLeft] = useState(0);\n  const [intervalID, changeIntervalID] = useState();\n  const [gameOver, changeGameOver] = useState(false);\n\n  // Method that looks at all of the posts, gets the highest voted post and adds it to the existing story text. The posts are all deleted afterwards\n  const addToStory = useCallback(async () => {\n    const storyRef = db.collection(\"stories\").doc(title);\n    const storyData = await storyRef.get();\n    let winner;\n    let highestVote = { votes: -9999 }; // Represents the object to be returned\n    let tieVotes = []; // Represents an array that is pushed values that tie with the highest vote count, is rewritten when a new high vote is encountered\n    // This loop will return an object representing the text to be added to the story, and the user who won\n    const { posts } = storyData.data();\n    if (posts.length > 0) {\n      posts.forEach((post) => {\n        if (post.votes > highestVote.votes) {\n          tieVotes = []; // Reset the tievotes array\n          highestVote = post;\n          tieVotes.push(highestVote);\n        } else if (post.votes === highestVote.votes) {\n          tieVotes.push(post);\n        }\n      });\n\n      if (tieVotes.length > 1 || highestVote.votes === 0) {\n        // Get a random winner from the posts that have tied\n        winner = tieVotes[Math.floor(Math.random() * tieVotes.length)];\n      } else {\n        winner = highestVote;\n      }\n      const updatedText = `${storyData.data().text} ${winner.text}`;\n      storyRef.set({\n        text: updatedText,\n        posts: [],\n        title: title,\n      });\n\n      const userRef = db.collection(\"users\").doc(winner.owner.username);\n      const userData = await userRef.get();\n\n      userRef.set(\n        {\n          winningPosts: userData.data().winningPosts + 1,\n        },\n        { merge: true }\n      );\n      changeDisplayPosts([]);\n      console.log(\"Post elimination successful\");\n    }\n  }, [title]);\n\n  // Click handler for adding a new post to the story\n  const handleClick = async (e) => {\n    if (user) {\n      e.preventDefault();\n      if (!(await checkPosted())) {\n        // Check to see if this user has already posted\n        const storyRef = db.collection(\"stories\").doc(title);\n        const post = {\n          owner: {\n            photoURL: user.photoURL,\n            username: user.displayName,\n          },\n          text: newPost,\n          votes: 0,\n          voters: [],\n        };\n        await storyRef\n          .update({\n            posts: firebase.firestore.FieldValue.arrayUnion(post), // Appending a new post to the story\n          })\n          .then(() => {\n            reset();\n            console.log(\"Post successfully added!\");\n          })\n          .catch((err) => console.log(err));\n      } else {\n        changeAlert(\"You've already posted, wait for the time to run out.\");\n      }\n    } else history.push(\"/signup\");\n  };\n\n  // Check to see if there is already a post with the username, returns false if there is no post made by the user yet\n  const checkPosted = async () => {\n    const storyRef = await db.collection(\"stories\").doc(title).get();\n    return storyRef\n      .data()\n      .posts.some((post) => post.owner.username === user.displayName);\n  };\n\n  // Method to get story data from the database\n  const fetchData = useCallback(async () => {\n    const storyRef = db.collection(\"stories\").doc(title);\n    const storyData = await storyRef.get();\n    return storyData;\n  }, [title]);\n\n  const fetchStoryData = useCallback(async () => {\n    const storyData = await fetchData();\n    if (storyData.exists) {\n      const { posts, text } = storyData.data();\n      // Get all the posts from the database for this particular story\n      if (posts.length > 0) {\n        const newPosts = posts.map((post) => (\n          <Post\n            changeAlert={changeAlert}\n            key={post.owner.username}\n            {...post}\n            title={title}\n          />\n        ));\n        changeDisplayPosts(newPosts);\n      }\n      changeText(text);\n    } else history.push(\"/error\");\n  }, [fetchData, history, title]);\n\n  // Used to iterate through roundsend object and calculate the time\n  const updateTimeInDatabase = useCallback(async () => {\n    if (timeObject.currentRound !== timeObject.totalRounds) {\n      console.log(\"checking time\");\n      const currentTime = getCurrentTime();\n      let newCurrentRound = timeObject.currentRound;\n      // iterate through the roundend list, comparing currentround and currenttime to each round end time\n\n      timeObject.roundEnd.forEach((roundEnd, index) => {\n        if (\n          timeObject.currentRound < index + 1 &&\n          compareTime(currentTime, roundEnd)\n        ) {\n          // if our current time is greater than this time, and our current round is less than this round\n          newCurrentRound = index + 1;\n        }\n      });\n\n      changeSecondsLeft(\n        timeObject.timeInterval +\n          calculateTimeDifference(\n            currentTime,\n            timeObject.roundEnd[newCurrentRound - 1]\n          )\n      );\n      changeCurrentRound(newCurrentRound);\n    }\n  }, [timeObject]);\n\n  const updateDatabase = useCallback(async () => {\n    if (timeObject.roundEnd) {\n      // Rounds have changed, update time in database and add to story\n      await addToStory();\n      const updatedTimeInformation = {\n        roundEnd: timeObject.roundEnd,\n        currentRound,\n        totalRounds: timeObject.totalRounds,\n        timeInterval: timeObject.timeInterval,\n      };\n      await db.collection(\"stories\").doc(title).update({\n        timeInformation: updatedTimeInformation,\n      });\n    }\n  }, [addToStory, currentRound, timeObject, title]);\n\n  // After currentRound is changed, this use effect is triggered and updates the database\n  useEffect(() => {\n    updateDatabase();\n    // This if statement is used when we are at the last round\n    if (currentRound === totalRounds) {\n      setTimeout(() => {\n        clearInterval(intervalID);\n        changeGameOver(true);\n      }, timeObject.timeInterval * 1000);\n    }\n  }, [currentRound, updateDatabase, intervalID]);\n\n  // useEffect for setting the time object by getting time data from database\n  useEffect(() => {\n    const fetchTimeData = async () => {\n      const storyData = await fetchData();\n      let { timeInformation } = storyData.data();\n      changeTimeObject(timeInformation);\n      changeTotalRounds(timeInformation.totalRounds);\n      changeCurrentRound(timeInformation.currentRound);\n    };\n    fetchTimeData();\n  }, [fetchData]);\n\n  // this useeffect sets an interval that runs every second, fetching data from the database\n  useEffect(() => {\n    const time = setInterval(() => {\n      updateTimeInDatabase();\n      fetchStoryData();\n    }, 1000);\n    changeIntervalID(time);\n    setTimeout(() => changeLoading(false), 1750);\n    return () => clearInterval(time);\n  }, [timeObject, updateTimeInDatabase, fetchStoryData]);\n\n  return (\n    <>\n      {alert ? (\n        <Alert onClick={() => changeAlert(\"\")} variant=\"danger\">\n          <Alert.Heading>{alert}</Alert.Heading>\n        </Alert>\n      ) : null}\n      <StoryDisplay\n        secondsLeft={secondsLeft}\n        classes={classes}\n        handleClick={handleClick}\n        loading={loading}\n        title={title}\n        displayText={displayText}\n        posts={displayPosts}\n        newPost={newPost}\n        changeNewPost={changeNewPost}\n        addToStory={addToStory}\n        currentRound={currentRound}\n        totalRounds={totalRounds}\n        gameOver={gameOver}\n      />\n    </>\n  );\n}\n\nexport default withStyles(styles)(Story);\n","/Users/adrianronquillo/Desktop/storytime/src/components/User.js",[],"/Users/adrianronquillo/Desktop/storytime/src/components/Error.js",[],"/Users/adrianronquillo/Desktop/storytime/src/components/EditUser.js",[],"/Users/adrianronquillo/Desktop/storytime/src/components/Signup.js",[],"/Users/adrianronquillo/Desktop/storytime/src/contexts/AuthenticatedContext.js",[],"/Users/adrianronquillo/Desktop/storytime/src/contexts/UpdatedUserContext.js",[],"/Users/adrianronquillo/Desktop/storytime/src/components/Spinner.js",[],"/Users/adrianronquillo/Desktop/storytime/src/components/UserDisplay.js",[],"/Users/adrianronquillo/Desktop/storytime/src/components/Post.js",[],"/Users/adrianronquillo/Desktop/storytime/src/hooks/useForm.js",[],"/Users/adrianronquillo/Desktop/storytime/src/firebase/Firebase.js",[],"/Users/adrianronquillo/Desktop/storytime/src/components/StoryDisplay.js",[],"/Users/adrianronquillo/Desktop/storytime/src/components/SignupForm.js",[],"/Users/adrianronquillo/Desktop/storytime/src/components/LoginForm.js",[],"/Users/adrianronquillo/Desktop/storytime/src/components/MiniStory.js",[],"/Users/adrianronquillo/Desktop/storytime/src/components/PostDisplay.js",[],"/Users/adrianronquillo/Desktop/storytime/src/components/EditUserForn.js",[],"/Users/adrianronquillo/Desktop/storytime/src/components/HomeForm.js",[],"/Users/adrianronquillo/Desktop/storytime/src/components/Timer.js",["135"],"/Users/adrianronquillo/Desktop/storytime/src/components/timer.js",[],"/Users/adrianronquillo/Desktop/storytime/src/styles/storyStyles.js",[],"/Users/adrianronquillo/Desktop/storytime/src/styles/homeStyles.js",[],"/Users/adrianronquillo/Desktop/storytime/src/styles/editUserStyles.js",[],"/Users/adrianronquillo/Desktop/storytime/src/styles/userDisplayStyles.js",[],"/Users/adrianronquillo/Desktop/storytime/src/styles/postStyles.js",[],"/Users/adrianronquillo/Desktop/storytime/src/components/ReactSlider.js",[],{"ruleId":"136","replacedBy":"137"},{"ruleId":"138","replacedBy":"139"},{"ruleId":"140","severity":1,"message":"141","line":200,"column":6,"nodeType":"142","endLine":200,"endColumn":48,"suggestions":"143"},{"ruleId":"144","severity":1,"message":"145","line":58,"column":36,"nodeType":"146","messageId":"147","endLine":58,"endColumn":38},"no-native-reassign",["148"],"no-negated-in-lhs",["149"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'timeObject.timeInterval' and 'totalRounds'. Either include them or remove the dependency array.","ArrayExpression",["150"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation",{"desc":"151","fix":"152"},"Update the dependencies array to be: [currentRound, updateDatabase, intervalID, totalRounds, timeObject.timeInterval]",{"range":"153","text":"154"},[7309,7351],"[currentRound, updateDatabase, intervalID, totalRounds, timeObject.timeInterval]"]